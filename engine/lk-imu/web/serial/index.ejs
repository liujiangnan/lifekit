<div id="app" style="padding:20px;">
  <el-breadcrumb separator="/" style="height:30px;line-height:30px;">
    <el-breadcrumb-item :to="{ path: '/lk-imu' }">首页</el-breadcrumb-item>
    <el-breadcrumb-item>设备维护</el-breadcrumb-item>
  </el-breadcrumb>
  <el-container>
    <el-aside style="width:auto;min-width:200px;">
      <el-card style="width:200px; min-height:400px;">
        <div class="tree-title"><span>串口树</span></div>
        <el-tree :data="treeData" :props="treeProps" node-key="id" @node-click="handleNodeClick"></el-tree>
      </el-card>
    </el-aside>
    <el-main>
      <template v-if="type==='serial'">
        <% include serial %>
      </template>
      <template v-if="type==='device'">
        <% include device %>
      </template>
    </el-main>
  </el-container>
</div>

<script>
  $(function() {
    new Vue({
      el: '#app',
      data(){
        return {
          treeProps:{
            id: "id",
            label: "name",
            children: "children"
          },
          treeData:net.data.treeData,
          
          type:"serial",  //默认是串口

          serialProp: net.data.treeData[0],  //串口属性
          deviceProp: {},  //设备属性
          devList: net.data.treeData[0].children,  //设备列表

          addDeviceFlag: false,  //设备标识

        }
      },
      methods: {
        handleNodeClick(data) {
          if(data.type==="serial"){
            this.type = "serial";
            this.serialProp = data;
          }else if(data.type==="device"){
            this.type = "device";
            this.deviceProp = data;
          } 
        },
        handleTabClick(tab, event) {

        },
        handleDevRowClick(row){
          this.deviceProp = row;
          this.addDeviceFlag = true; 
        },
        handleDevRowDel(id,index){
          let _this = this;
          this.$confirm('确认删除？')
          .then(_ => {
            net.call("deleteDevice",id,function(flag){
              if(flag==="success"){
                _this.devList.splice(index,1);
                _this.$message.success({ showClose: true, message: "操作成功", duration: 2000 });
              }else{
                _this.$message.error({ showClose: true, message: flag, duration: 2000 });
              }
            });
          })
          .catch(_ => {
            _this.$message.error({ showClose: true, message: _, duration: 2000 });
          });
        },
        addDevice(){
          this.addDeviceFlag = true;
        },
        cancel(flag){
          if(flag==='device'){
            this.deviceProp = {};
            this.addDeviceFlag = false;
          }
        },
        saveSerial(){
          let _this = this;
          net.call("saveSerial",this.serialProp,function(flag){
            if(flag==="success"){
              _this.$message.success({ showClose: true, message: "保存成功", duration: 2000 });
            }else{
              _this.$message.error({ showClose: true, message: flag, duration: 2000 });
            }
          });
        },
        saveDevice(){
          let _this = this;
          let deviceInfo = this.deviceProp;
          deviceInfo.lkImuSerialId = this.serialProp.id;
          net.call("saveDevice",deviceInfo,function(res){
            if(res.flag==="success"){
              if(res.data){
                //返回数据说明是新增，否则是修改
                _this.devList.push(res.data);
              } 
              _this.$alert('保存成功', '设备', {
                confirmButtonText: '确定',
                callback: action => {
                  _this.deviceProp = {};
                  _this.addDeviceFlag = false;
                }
              });
            }else{
              _this.$message.error({ showClose: true, message: res, duration: 2000 });
            }
          });
        }
      },
      mounted(){

      }
    });
  });
</script>

<style>
  .el-main {
    padding-top: 0px;
  }
  
  .el-card__body {
    padding: 0px;
  }
  
  .tree-title {
    width: 100%;
    background: #DCDFE6;
    height: 35px;
    line-height: 35px;
    padding-left: 10px;
  }
</style>